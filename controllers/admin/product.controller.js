const Product = require("../../models/product.model");
const ProductCategory = require("../../models/products-category.model");
const paginationHelper = require("../../helpers/pagination");
const productHelper = require("../../helpers/product");

const mongoose = require("mongoose");

module.exports.index = async (req, res) => {
  const find = {
    deleted: false,
  };

  const productName = req.query.query;
  const status = req.query.status;

  // Pagination Variables
  const pageCurrent = req.query.page ? parseInt(req.query.page, 10) : 1;
  const limitItem = 8;

  try {
    // T√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m
    if (productName) {
      find.title = { $regex: productName, $options: "i" };
      req.flash("info", "ƒêang t√¨m ki·∫øm s·∫£n ph·∫©m: " + productName);
    }

    // L·ªçc theo tr·∫°ng th√°i n·∫øu c√≥
    if (status && status !== "show-all") {
      find.status = status;
      req.flash("info", `ƒêang t√¨m ki·∫øm s·∫£n ph·∫©m v·ªõi tr·∫°ng th√°i: ${status}`);
    }

    // T·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ph√π h·ª£p
    const totalItem = await Product.countDocuments(find);

    // X·ª≠ l√Ω ph√¢n trang
    const objectPagination = paginationHelper(
      pageCurrent,
      totalItem,
      limitItem
    );

    // L·∫•y s·∫£n ph·∫©m, s·∫Øp x·∫øp theo `position` gi·∫£m d·∫ßn
    const products = await Product.find(find)
      .populate({
        path: "product_category_id",
        select: "title",
      })
      .sort({ position: -1 }) // S·∫Øp x·∫øp `position` gi·∫£m d·∫ßn
      .limit(objectPagination.limitItem)
      .skip(objectPagination.skip);

    res.render("admin/pages/product/index", {
      title: "Shop c·ªßa t√¥i",
      message: "Hello there!",
      products: productHelper.priceNews(products),
      titleTopbar: "Product List!",
      pagination: objectPagination,
      currentStatus: status || "show-all", // Tr·∫°ng th√°i hi·ªán t·∫°i
    });
  } catch (error) {
    console.error(error);
    req.flash("error", "C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm.");
    res.redirect("back");
  }
};



module.exports.create = async (req, res) => {
  const categories = await ProductCategory.find({deleted: false});
  res.render("admin/pages/product/create", {
    title: "Shop c·ªßa t√¥i",
    message: "Hello there!",
    titleTopbar: "CREATE PRODUCT",
    productsCategory: categories,
  });
};

module.exports.createPost = async (req, res) => {
  try {
    // üõ°Ô∏è **Validate D·ªØ Li·ªáu B·∫Øt Bu·ªôc**
    if (!req.body.title || !req.body.price || !req.body.stock) {
      req.flash("error", "Title, price, and stock are required fields.");
      return res.redirect("back");
    }

    // üß† **X·ª≠ L√Ω D·ªØ Li·ªáu Nh·∫≠n ƒê∆∞·ª£c**
    const position = req.body.position || (await Product.countDocuments()) + 1;
    const productCategoryId = mongoose.isValidObjectId(
      req.body.product_category_id
    )
      ? req.body.product_category_id
      : null;

    let sizes = [];
    if (Array.isArray(req.body.size) && req.body.size.length > 0) {
      sizes = req.body.size;
    } 

    // üõ†Ô∏è **T·∫°o S·∫£n Ph·∫©m M·ªõi**
    const newProduct = new Product({
      title: req.body.title.trim(),
      description: req.body.description?.trim() || "",
      product_category_id: productCategoryId,
      price: Number(req.body.price),
      discountPercentage: Number(req.body.discountPercentage) || 0,
      stock: Number(req.body.stock),
      status: req.body.status || "active",
      position: position,
      brand: req.body.brand?.trim() || "",
      weight: req.body.weight?.trim() || "",
      gender: req.body.gender || "unisex",
      thumbnail: req.body.thumbnail,
      size: sizes
    });

    // üíæ **L∆∞u S·∫£n Ph·∫©m**
    await newProduct.save();

    // üéØ **Ph·∫£n H·ªìi Th√†nh C√¥ng**
    req.flash("success", "T·∫°o m·ªõi s·∫£n ph·∫©m th√†nh c√¥ng!");
    res.redirect(`/admin/products/detail/${newProduct._id}`);
  } catch (err) {
    console.error("‚ùå Error creating product:", err.message || err);
    req.flash("error", "C√≥ l·ªói x·∫£y ra khi t·∫°o s·∫£n ph·∫©m.");
    res.redirect("back");
  }
};

module.exports.detail = async (req, res) => {
  try {
    // üìå **L·∫•y ID t·ª´ params**
    const id = req.params.id;

    if (!mongoose.isValidObjectId(id)) {
      req.flash("error", "ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá.");
      return res.redirect("/admin/products/list");
    }

    // üîç **T√¨m s·∫£n ph·∫©m d·ª±a tr√™n ID v√† ƒë·∫£m b·∫£o kh√¥ng b·ªã x√≥a**
    const product = await Product.findOne({
      _id: id,
      deleted: false,
    })
      .populate("product_category_id") // N·∫°p th√¥ng tin danh m·ª•c s·∫£n ph·∫©m
      .lean();

    // ‚ö†Ô∏è **Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i**
    if (!product) {
      req.flash("error", "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.");
      return res.redirect("/admin/products");
    }

    // üí∞ **T√≠nh to√°n gi√° cu·ªëi c√πng (finalPrice) n·∫øu c·∫ßn**
    if (product.price && product.discountPercentage) {
      product.finalPrice =
        product.price - product.price * (product.discountPercentage / 100);
    } else {
      product.finalPrice = product.price || 0;
    }

    // üñºÔ∏è **ƒê·∫£m b·∫£o h√¨nh ·∫£nh m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ thumbnail**
    if (!product.thumbnail || product.thumbnail.length === 0) {
      product.thumbnail = ["/images/default-product.jpg"];
    }

    // üìù **Render trang chi ti·∫øt s·∫£n ph·∫©m**
    res.render("admin/pages/product/detail", {
      title: "Shop c·ªßa t√¥i",
      message: "Chi ti·∫øt s·∫£n ph·∫©m",
      titleTopbar: "PRODUCT DETAIL",
      product,
    });
  } catch (error) {
    console.error(
      "‚ùå L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:",
      error.stack || error.message || error
    );
    req.flash("error", "C√≥ l·ªói x·∫£y ra khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m.");
    res.redirect("/admin/products/list");
  }
};

module.exports.edit = async (req, res) => {
  try {
    const id = req.params.id;

    const categories = await ProductCategory.find({deleted: false});

    const product = await Product.findOne({ _id: id })
      .populate({
        path: "product_category_id",
        select: "title",
      })
      .lean();

    if (!product) {
      req.flash("error", "Product not found");
      return res.redirect(`/${prefixAdmin}/products/list`);
    }

    // ‚úÖ Render trang ch·ªânh s·ª≠a s·∫£n ph·∫©m
    res.render("admin/pages/product/edit", {
      title: "Shop c·ªßa t√¥i",
      titleTopbar: "EDIT PRODUCT",
      message: req.flash("success") || req.flash("error"),
      productsCategory: categories,
      product: product,
    });
  } catch (error) {
    console.error("‚ùå Error in edit product controller:", error);
    req.flash("error", "An error occurred while loading the product edit page");
    res.redirect(`/${prefixAdmin}/products`);
  }
};

module.exports.editPatch = async (req, res) => {
  try {
    const { id } = req.params;

    // üîç Ki·ªÉm tra s·∫£n ph·∫©m t·ªìn t·∫°i
    const product = await Product.findById(id);
    if (!product) {
      req.flash("error", "Product not found.");
      return res.redirect("back");
    }

    // üìä X·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o
    const { price, discountPercentage, stock, weight, position, ...rest } = req.body;

    // √âp ki·ªÉu d·ªØ li·ªáu
    const sanitizedData = {
      price: !isNaN(parseInt(price)) ? parseInt(price) : 0,
      discountPercentage: !isNaN(parseInt(discountPercentage)) ? parseInt(discountPercentage) : 0,
      stock: !isNaN(parseInt(stock)) ? parseInt(stock) : 0,
      weight: !isNaN(parseFloat(weight)) ? parseFloat(weight) : 0,
      position: position ? (!isNaN(parseInt(position)) ? parseInt(position) : 0) : product.position,
      ...rest, // Gi·ªØ l·∫°i c√°c tr∆∞·ªùng kh√°c nh∆∞ `title`, `brand`, `description`
    };

    // üñºÔ∏è X·ª≠ l√Ω h√¨nh ·∫£nh (n·∫øu c√≥ upload m·ªõi)
    if (req.files?.thumbnail) {
      sanitizedData.thumbnail = req.files.thumbnail.map((file) => file.path);
    }

    // üìù Th√¥ng tin ng∆∞·ªùi c·∫≠p nh·∫≠t
    const updatedBy = {
      account_id: res.locals.user?.id || "system",
      updatedAt: new Date(),
    };

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu
    const updateData = {
      ...sanitizedData,
      $push: { updatedBy }, // L∆∞u l·ªãch s·ª≠ c·∫≠p nh·∫≠t
    };

    const updatedProduct = await Product.findByIdAndUpdate(id, updateData, {
      new: true,
      runValidators: true,
    });

    if (!updatedProduct) {
      req.flash("error", "Failed to update product.");
      return res.redirect("back");
    }

    req.flash("success", "Product updated successfully!");
    res.redirect(`/admin/products/detail/${id}`);
  } catch (error) {
    console.error("‚ùå Error updating product:", error);
    req.flash("error", "An error occurred while updating the product.");
    res.redirect("back");
  }
};


module.exports.changeStatus = async (req, res) => {
  try {
    await Product.updateOne(
      {
        _id: req.params.id,
      },
      {
        status: req.body.status,
      }
    );

    req.flash("success", `C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng`);
    res.redirect(`back`);
  } catch (err) {
    // Handle any errors that occur during the save operation
    req.flash("error", "C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm.");
    res.redirect(`back`);
  }
};

module.exports.changeIsFeature = async (req, res)=>{
  try {
    const { id } = req.params; // L·∫•y ID s·∫£n ph·∫©m t·ª´ URL
    const { isFeature } = req.body; // L·∫•y tr·∫°ng th√°i m·ªõi t·ª´ form

    // ƒê·∫£m b·∫£o gi√° tr·ªã `isFeature` l√† boolean
    const newFeatureStatus = isFeature == 'true' ? false : true;

    // T√¨m v√† c·∫≠p nh·∫≠t s·∫£n ph·∫©m trong c∆° s·ªü d·ªØ li·ªáu
    const updatedProduct = await Product.findByIdAndUpdate(
      id,
      { isFeatured: newFeatureStatus },
      { new: true } // Tr·∫£ v·ªÅ s·∫£n ph·∫©m sau khi c·∫≠p nh·∫≠t
    );

    if (!updatedProduct) {
      req.flash("error", "C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm.");
      res.redirect(`back`); 
    }
    req.flash("success", `C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng`);
    res.redirect(`back`); 
  } catch (error) {
    console.error('Error changing product feature status:', error);
    req.flash("error", "C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm.");
    res.redirect(`back`); 
  }
}

module.exports.delete = async (req, res) => {
  const id = req.params.id;

  try {
    await Product.updateOne({ _id: id }, { $set: { deleted: true } });

    req.flash("success", `Deleted Success!`);
    res.redirect(`back`);
  } catch (error) {
    req.flash("error", "C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm.");
    res.redirect(`back`);
  }
};

module.exports.changeMultiStatus = async (req, res) => {
  try {
    const { ids, type } = req.body;

    if (!ids) {
      req.flash("error", "No IDs provided.");
      return res.redirect("back");
    }

    const idList = ids.split(",").filter(Boolean); // Lo·∫°i b·ªè gi√° tr·ªã r·ªóng

    if (idList.length === 0) {
      req.flash("error", "No valid IDs provided.");
      return res.redirect("back");
    }

    switch (type) {
      case "change-position":
        const updatePromises = idList.map((item) => {
          const [id, position] = item.split("-");
          if (!id || !position || isNaN(position)) {
            req.flash("error", "Invalid ID or position.");
            throw new Error("Invalid ID or position format.");
          }
          return Product.updateOne({ _id: id }, { position: Number(position) });
        });

        // Th·ª±c hi·ªán t·∫•t c·∫£ c√°c truy v·∫•n song song ƒë·ªÉ tƒÉng t·ªëc
        await Promise.all(updatePromises);
        req.flash("success", "Positions updated successfully.");
        break;

      case "active":
      case "inactive":
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i h√†ng lo·∫°t
        await Product.updateMany({ _id: { $in: idList } }, { status: type });
        req.flash("success", `Status updated to ${type}.`);
        break;

      case "delete-all":
        // ƒê√°nh d·∫•u x√≥a c√°c s·∫£n ph·∫©m
        await Product.updateMany(
          { _id: { $in: idList } },
          {
            deleted: true,
            deletedBy: {
              account_id: res.locals.user.id,
              deletedAt: new Date(),
            },
          }
        );
        req.flash("success", "Selected products deleted successfully.");
        break;

      default:
        req.flash("error", "Invalid action type.");
        return res.redirect("back");
    }

    res.redirect("back");
  } catch (error) {
    console.error(error);
    req.flash("error", "An error occurred while processing the request.");
    res.redirect("back");
  }
};
