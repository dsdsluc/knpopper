const Coupon = require("../../models/coupon.model");
const paginationHelper = require("../../helpers/pagination");

module.exports.list = async (req, res) => {
    try {
        // üõ†Ô∏è L·∫•y tham s·ªë t·ª´ query
        const { 
            page = 1, 
            limit = 4, 
            is_active, 
            discount_type, 
            sort_by = 'createdAt', 
            sort_order = 'desc' 
        } = req.query;

        // üõ†Ô∏è T·∫°o b·ªô l·ªçc
        const filter = {};
        if (is_active !== undefined) {
            filter.is_active = is_active === 'true';
        }
        if (discount_type) {
            filter.discount_type = discount_type;
        }

        const totalItems = await Coupon.countDocuments(filter);

        const pagination = paginationHelper(page, totalItems, limit);

        const coupons = await Coupon.find(filter)
            .sort({ [sort_by]: sort_order === 'desc' ? -1 : 1 })
            .skip(pagination.skip)
            .limit(pagination.limitItem);

        res.render("admin/pages/coupons/index", {
            title: "Qu·∫£n L√Ω M√£ Gi·∫£m Gi√°",
            titleTopbar: "Qu·∫£n L√Ω M√£ Gi·∫£m Gi√°",
            coupons,               
            pagination,            
            query: req.query      
        });
    } catch (error) {
        console.error("‚ùå Error fetching coupons:", error);
        res.redirect("back");
    }
};


module.exports.create = async (req, res) => {

    res.render("admin/pages/coupons/create", {
        title: "T·∫°o m√£ gi·∫£m gi√°",
        message: "Vui l√≤ng ƒëi·ªÅn th√¥ng tin m√£ gi·∫£m gi√°",
        titleTopbar: "CREATE COUPON",
    });
};

module.exports.createPost = async (req, res) => {
    try {
        // üõ†Ô∏è L·∫•y d·ªØ li·ªáu t·ª´ body
        const {
            code,
            description,
            discount_value,
            discount_type,
            min_order_value,
            start_date,
            end_date,
            usage_limit,
            usage_per_user,
            quantity,
            is_combinable,
            is_active
        } = req.body;

        // üõ°Ô∏è Validation c∆° b·∫£n
        if (!code || !discount_value || !discount_type || !start_date || !end_date || !quantity) {
            req.flash('error', 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!');
            return res.redirect("back");
        }

        if (new Date(start_date) > new Date(end_date)) {
            req.flash('error', 'Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ l·ªõn h∆°n ng√†y h·∫øt h·∫°n!');
            return res.redirect("back");
        }

        

        // üîÑ Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu Boolean
        const isCombinable = is_combinable === 'true';
        const isActive = is_active === 'true';

        // ‚úÖ T·∫°o m√£ gi·∫£m gi√° m·ªõi
        await Coupon.create({
            code,
            description,
            discount_value,
            discount_type,
            min_order_value: min_order_value || 0,
            start_date,
            end_date,
            usage_limit: usage_limit || 0,
            usage_per_user: usage_per_user || 1,
            quantity,
            is_combinable: isCombinable,
            is_active: isActive
        });

        // üéØ Chuy·ªÉn h∆∞·ªõng v·ªÅ trang danh s√°ch m√£ gi·∫£m gi√°
        req.flash('success', 'üéâ M√£ gi·∫£m gi√° ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');
        res.redirect(`/${req.prefixAdmin || 'admin'}/coupon/list`);
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫°o m√£ gi·∫£m gi√°:", error);

        // üõ°Ô∏è Ki·ªÉm tra l·ªói tr√πng m√£ gi·∫£m gi√°
        if (error.code === 11000) {
            req.flash('error', 'M√£ gi·∫£m gi√° ƒë√£ t·ªìn t·∫°i, vui l√≤ng ch·ªçn m√£ kh√°c.');
        } else {
            req.flash('error', 'C√≥ l·ªói x·∫£y ra khi t·∫°o m√£ gi·∫£m gi√°, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        res.redirect("back");
    }
};


module.exports.edit = async (req, res) => {
    try {
        // üõ†Ô∏è L·∫•y ID m√£ gi·∫£m gi√° t·ª´ params
        const { id:couponId } = req.params;

        // üõ°Ô∏è Ki·ªÉm tra ID h·ª£p l·ªá
        if (!couponId) {
            req.flash('error', 'ID m√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá!');
            return res.redirect("back");
        }

        // üîÑ T√¨m m√£ gi·∫£m gi√° theo ID
        const coupon = await Coupon.findById(couponId);
        if (!coupon) {
            req.flash('error', 'M√£ gi·∫£m gi√° kh√¥ng t·ªìn t·∫°i!');
            return res.redirect("back");
        }

        // ‚úÖ Render trang ch·ªânh s·ª≠a v·ªõi d·ªØ li·ªáu m√£ gi·∫£m gi√°
        res.render("admin/pages/coupons/edit", {
            title: "Ch·ªânh S·ª≠a M√£ Gi·∫£m Gi√°",
            coupon,
            prefixAdmin: req.prefixAdmin || 'admin',
            titleTopbar: "Ch·ªânh S·ª≠a M√£ Gi·∫£m Gi√°",
            
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin m√£ gi·∫£m gi√°:", error);
        req.flash('error', 'C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin m√£ gi·∫£m gi√°.');
        res.redirect("back");
    }
};


module.exports.editPatch = async (req, res) => {
    try {
        // üõ†Ô∏è L·∫•y ID m√£ gi·∫£m gi√° t·ª´ params
        const { id: couponId } = req.params;

        // üõ°Ô∏è Ki·ªÉm tra ID h·ª£p l·ªá
        if (!couponId) {
            req.flash('error', 'ID m√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá!');
            return res.redirect("back");
        }

        // üõ†Ô∏è L·∫•y d·ªØ li·ªáu t·ª´ body
        const {
            code,
            description,
            discount_value,
            discount_type,
            min_order_value,
            start_date,
            end_date,
            usage_limit,
            usage_per_user,
            quantity,
            is_combinable,
            is_active
        } = req.body;

        // üõ°Ô∏è Validation d·ªØ li·ªáu c∆° b·∫£n
        if (!code || !discount_value || !discount_type || !start_date || !end_date || !quantity) {
            req.flash('error', 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!');
            return res.redirect("back");
        }

        if (new Date(start_date) > new Date(end_date)) {
            req.flash('error', 'Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ l·ªõn h∆°n ng√†y h·∫øt h·∫°n!');
            return res.redirect("back");
        }

        if (discount_value <= 0 || quantity <= 0 || usage_per_user <= 0) {
            req.flash('error', 'Gi√° tr·ªã gi·∫£m, s·ªë l∆∞·ª£ng v√† gi·ªõi h·∫°n m·ªói ng∆∞·ªùi ph·∫£i l·ªõn h∆°n 0!');
            return res.redirect("back");
        }

        // üîÑ Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu Boolean
        const isCombinable = is_combinable === 'true';
        const isActive = is_active === 'true';

        // ‚úÖ C·∫≠p nh·∫≠t m√£ gi·∫£m gi√°
        const updatedCoupon = await Coupon.findByIdAndUpdate(
            couponId,
            {
                code,
                description,
                discount_value,
                discount_type,
                min_order_value: min_order_value || 0,
                start_date,
                end_date,
                usage_limit: usage_limit || 0,
                usage_per_user: usage_per_user || 1,
                quantity,
                is_combinable: isCombinable,
                is_active: isActive
            },
            { new: true, runValidators: true }
        );

        // üõ°Ô∏è Ki·ªÉm tra n·∫øu m√£ gi·∫£m gi√° kh√¥ng t·ªìn t·∫°i
        if (!updatedCoupon) {
            req.flash('error', 'M√£ gi·∫£m gi√° kh√¥ng t·ªìn t·∫°i!');
            return res.redirect("back");
        }

        // üéØ Chuy·ªÉn h∆∞·ªõng sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng
        req.flash('success', 'üéâ M√£ gi·∫£m gi√° ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!');
        res.redirect(`/${req.prefixAdmin || 'admin'}/coupon/list`);
    } catch (error) {

        // üõ°Ô∏è X·ª≠ l√Ω l·ªói tr√πng m√£ gi·∫£m gi√°
        if (error.code === 11000) {
            req.flash('error', 'M√£ gi·∫£m gi√° ƒë√£ t·ªìn t·∫°i, vui l√≤ng ch·ªçn m√£ kh√°c.');
        } else {
            req.flash('error', 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t m√£ gi·∫£m gi√°, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        res.redirect("back");
    }
};

module.exports.changeStatus = async (req, res) => {
    try {
        const { couponId, status } = req.body; 

        const isActive = status === 'active';

        const updatedCoupon = await Coupon.findByIdAndUpdate(couponId, { is_active: isActive }, { new: true });

        if (!updatedCoupon) {
            req.flash("error", "Kh√¥ng t√¨m th·∫•y m√£ gi·∫£m gi√°.");
            return res.redirect("back");
        }

        req.flash("success", "Tr·∫°ng th√°i m√£ gi·∫£m gi√° ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!");
        res.redirect("back");
    } catch (error) {
        console.error(error);
        req.flash("error", "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t tr·∫°ng th√°i m√£ gi·∫£m gi√°.");
        res.redirect("back");
    }
};

module.exports.delete = async (req, res) => {
    try {
        const { couponId } = req.body; 

        const deletedCoupon = await Coupon.findByIdAndDelete(couponId);

        if (!deletedCoupon) {
            req.flash("error", "Kh√¥ng t√¨m th·∫•y m√£ gi·∫£m gi√° ƒë·ªÉ x√≥a.");
            return res.redirect("back");
        }

        req.flash("success", "M√£ gi·∫£m gi√° ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!");
        res.redirect(`back`);
    } catch (error) {
        console.error(error);
        req.flash("error", "C√≥ l·ªói x·∫£y ra khi x√≥a m√£ gi·∫£m gi√°.");
        res.redirect("back");
    }
};







