const Cart = require("../../models/cart.model");
const Coupon = require("../../models/coupon.model");
const Order = require("../../models/order.model");
const citiesHelper = require("../../helpers/cities");


module.exports.index = async (req, res) => {
  try {
    const cartId = req.cookies.cartId;

    // T√¨m gi·ªè h√†ng v√† populate th√¥ng tin s·∫£n ph·∫©m
    const cart = await Cart.findById(cartId).populate("products.product_id");

    if (!cart) {
      req.flash("error", "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng.");
      return res.redirect("back");
    }

    // T√≠nh to√°n chi ti·∫øt gi·ªè h√†ng
    const items = cart.products.map((item) => {
      const product = item.product_id;
      if (!product) return null; // N·∫øu s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i

      // T√≠nh gi√° cu·ªëi c√πng sau gi·∫£m gi√° (l√†m tr√≤n v·ªÅ s·ªë nguy√™n)
      const discountAmount = Math.round((product.price * product.discountPercentage) / 100);
      const finalPrice = Math.round(product.price - discountAmount);

      return {
        product: {
          id: product._id,
          name: product.title,
          price: Math.round(product.price), // Gi√° g·ªëc l√†m tr√≤n
          discountPercentage: Math.round(product.discountPercentage), // % gi·∫£m gi√° l√†m tr√≤n
          finalPrice, // Gi√° cu·ªëi c√πng l√†m tr√≤n
          image: product.thumbnail?.[0], // H√¨nh ·∫£nh ƒë·∫ßu ti√™n (n·∫øu c√≥)
        },
        quantity: Math.round(item.quantity), // S·ªë l∆∞·ª£ng s·∫£n ph·∫©m l√†m tr√≤n
        totalPrice: Math.round(finalPrice * item.quantity), // T·ªïng gi√° s·∫£n ph·∫©m l√†m tr√≤n
      };
    }).filter((item) => item !== null);

    // T·ªïng s·ªë l∆∞·ª£ng v√† t·ªïng gi√° tr·ªã gi·ªè h√†ng (l√†m tr√≤n v·ªÅ s·ªë nguy√™n)
    const totalQuantity = Math.round(items.reduce((sum, item) => sum + item.quantity, 0));
    const totalPrice = Math.round(items.reduce((sum, item) => sum + item.totalPrice, 0));

    // Render d·ªØ li·ªáu ra view
    res.render("clients/pages/cart/index", {
      title: "Gi·ªè h√†ng",
      cart: {
        items,
        totalQuantity,
        totalPrice,
      },
    });
  } catch (error) {
    console.error("Error fetching cart:", error);
    req.flash("error", "C√≥ l·ªói x·∫£y ra khi l·∫•y gi·ªè h√†ng.");
    res.redirect("back");
  }
};

module.exports.addPost = async (req, res) => {
  try {
    const idProduct = req.params.id;
    const cartId = req.cookies.cartId;
    const quantity = parseInt(req.body.quantity);
    const size = req.body.weight;
    

    const cart = await Cart.findById(cartId);
    const existProductInCart = cart.products.find(
      (item) => item.product_id.toString() === idProduct
    );

    if (existProductInCart) {

      await Cart.updateOne(
        { _id: cartId, "products.product_id": idProduct },
        {
          $setOnInsert: {
            "products.$.product_id": idProduct,
            "products.$.size": size,
          },
          $inc: { "products.$.quantity": quantity },
        },
        { upsert: true }
      );
    } else {
      const objectCart = {
        product_id: idProduct,
        quantity: quantity,
        size: size
      };
      await Cart.updateOne(
        { _id: cartId },
        { $push: { products: objectCart } }
      );
    }

    req.flash("success", "Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng");
    res.redirect("back");
  } catch (error) {
    console.error("Error adding product to cart:", error);
    req.flash("error", "C√≥ l·ªói x·∫£y ra khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng.");
    res.redirect("back");
  }
};

module.exports.updatePatch = async (req, res) => {
  try {
    const cartItems = JSON.parse(req.body["data-update-cart"]).map((item) => ({
      product_id: item.productId,
      quantity: item.quantity,
    }));

    const result = await Cart.updateOne(
      { _id: req.cookies.cartId },
      { $set: { products: cartItems } }
    );

    if (result.modifiedCount > 0) {
      req.flash("success", "C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng");
    } else {
      req.flash("error", "Gi·ªè h√†ng kh√¥ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t");
    }

    res.redirect("back");
  } catch (error) {
    console.error("Error updating cart:", error);
    req.flash("error", "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t gi·ªè h√†ng");
    res.redirect("back");
  }
};

module.exports.checkout = async (req, res) => {
  try {
    const cartId = req.cookies.cartId;
    const couponCode = req.query.coupon || null; // L·∫•y m√£ gi·∫£m gi√° t·ª´ query string
    const userId = res.locals.user?._id; // L·∫•y ID ng∆∞·ªùi d√πng n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p

    // üìå **1. Ki·ªÉm tra gi·ªè h√†ng**
    const cart = await Cart.findById(cartId).populate('products.product_id');
    if (!cart || cart.products.length === 0) {
      req.flash('error', 'Gi·ªè h√†ng c·ªßa b·∫°n tr·ªëng.');
      return res.redirect('/cart');
    }

    // üìå **2. T√≠nh to√°n t·ªïng gi√° tr·ªã gi·ªè h√†ng**
    let totalPrice = 0;
    const items = cart.products
      .map((item) => {
        const product = item.product_id;
        if (!product) return null;

        const discountAmount = Math.round((product.price * product.discountPercentage) / 100);
        const finalPrice = Math.round(product.price - discountAmount);

        totalPrice += finalPrice * item.quantity;

        return {
          product: {
            id: product._id,
            name: product.title,
            price: product.price,
            discountPercentage: product.discountPercentage,
            finalPrice,
            image: product.thumbnail?.[0],
          },
          quantity: item.quantity,
          totalPrice: finalPrice * item.quantity,
        };
      })
      .filter((item) => item !== null);

    // üéüÔ∏è **3. √Åp d·ª•ng m√£ gi·∫£m gi√° (n·∫øu c√≥)**
    let couponDiscount = 0;
    let couponDetails = null;

    if (couponCode) {
      const coupon = await Coupon.findOne({ code: couponCode, is_active: true });

      if (!coupon) {
        req.flash('error', 'M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.');
        return res.redirect('/cart');
      }

      // üìÖ Ki·ªÉm tra ng√†y h·∫øt h·∫°n
      const now = new Date();
      if (now < coupon.start_date || now > coupon.end_date) {
        req.flash('error', 'M√£ gi·∫£m gi√° kh√¥ng c√≤n hi·ªáu l·ª±c.');
        return res.redirect('/cart');
      }

      // üõí Ki·ªÉm tra gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu
      if (totalPrice < coupon.min_order_value) {
        req.flash(
          'error',
          `ƒê∆°n h√†ng ph·∫£i c√≥ gi√° tr·ªã t·ªëi thi·ªÉu ${coupon.min_order_value} ƒë·ªÉ √°p d·ª•ng m√£ gi·∫£m gi√°.`
        );
        return res.redirect('/cart');
      }

      // üë• Ki·ªÉm tra s·ªë l·∫ßn s·ª≠ d·ª•ng cho m·ªói ng∆∞·ªùi d√πng
      const userUsageCount = coupon.used_by.filter(
        (id) => id.toString() === userId.toString()
      ).length;

      if (userUsageCount >= coupon.usage_per_user) {
        req.flash('error', 'B·∫°n ƒë√£ s·ª≠ d·ª•ng m√£ gi·∫£m gi√° n√†y t·ªëi ƒëa s·ªë l·∫ßn cho ph√©p.');
        return res.redirect('/cart');
      }

      // üîÑ Ki·ªÉm tra gi·ªõi h·∫°n t·ªïng s·ªë l·∫ßn s·ª≠ d·ª•ng
      if (coupon.usage_limit > 0 && coupon.used_by.length >= coupon.usage_limit) {
        req.flash('error', 'M√£ gi·∫£m gi√° ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng.');
        return res.redirect('/cart');
      }

      // üí∏ T√≠nh to√°n gi·∫£m gi√°
      if (coupon.discount_type === 'percentage') {
        couponDiscount = Math.round((totalPrice * coupon.discount_value) / 100);
      } else if (coupon.discount_type === 'fixed_amount') {
        couponDiscount = coupon.discount_value;
      }

      // Kh√¥ng cho ph√©p gi·∫£m gi√° v∆∞·ª£t qu√° t·ªïng gi√° tr·ªã ƒë∆°n h√†ng
      if (couponDiscount > totalPrice) {
        couponDiscount = totalPrice;
      }

      couponDetails = coupon;
      totalPrice -= couponDiscount; // Gi·∫£m gi√° tr∆∞·ªõc khi c·ªông ph√≠ ship

      req.flash('success', `M√£ gi·∫£m gi√° "${couponCode}" ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng!`);
    }

    // üì¶ **4. √Åp d·ª•ng ph√≠ giao h√†ng sau khi gi·∫£m gi√°**
    const shippingFee = 50; // Ph√≠ giao h√†ng c·ªë ƒë·ªãnh
    const grandTotal = Math.max(totalPrice + shippingFee, 0);

    // üìå **5. Render giao di·ªán thanh to√°n**
    res.render('clients/pages/cart/checkout', {
      title: 'Thanh To√°n',
      cart: {
        items,
        totalPrice,
        couponDiscount,
        shippingFee,
        grandTotal,
      },
      coupon: couponDetails,
      couponCode,
      user: res.locals.user,
      cities: citiesHelper.cities,
    });
  } catch (error) {
    console.error('Error during checkout:', error);
    req.flash('error', 'C√≥ l·ªói x·∫£y ra khi t·∫£i trang thanh to√°n.');
    res.redirect('/cart');
  }
};


module.exports.checkoutPost = async (req, res) => {
  try {
    const { recipientName, phoneNumber, address, paymentMethod, coupon_id, customerNote } = req.body;
    const cartId = req.cookies.cartId;
    const user_id = res.locals.user?._id;

    // üìå **1. Ki·ªÉm tra x√°c th·ª±c ng∆∞·ªùi d√πng**
    if (!user_id) {
      req.flash('error', 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t h√†ng.');
      return res.redirect('/auth/login');
    }

    // üìå **2. Ki·ªÉm tra gi·ªè h√†ng**
    const cart = await Cart.findById(cartId).populate('products.product_id');
    if (!cart || cart.products.length === 0) {
      req.flash('error', 'Gi·ªè h√†ng c·ªßa b·∫°n tr·ªëng.');
      return res.redirect('back');
    }

    // üìå **3. T√≠nh to√°n chi ti·∫øt ƒë∆°n h√†ng**
    let totalPrice = 0;
    const items = cart.products.map((product) => {
      const { product_id, quantity, size } = product;

      if (!product_id) {
        throw new Error('S·∫£n ph·∫©m trong gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.');
      }

      const priceAtPurchase = Math.round(product_id.price * ((100 - product_id.discountPercentage) / 100));
      const total_price = Math.round(priceAtPurchase * quantity);
      totalPrice += total_price;

      return {
        product_id: product_id._id,
        quantity,
        priceAtPurchase,
        total_price,
        size,
      };
    });

    // üéüÔ∏è **4. √Åp d·ª•ng m√£ gi·∫£m gi√° (n·∫øu c√≥)**
    let discount = 0;
    let couponDetails = null;

    if (coupon_id) {
      const coupon = await Coupon.findById(coupon_id);
      if (coupon) {
        discount = coupon.discount_type === 'percentage'
          ? Math.round((totalPrice * coupon.discount_value) / 100)
          : coupon.discount_value;

        discount = Math.min(discount, totalPrice); // Kh√¥ng v∆∞·ª£t qu√° t·ªïng ti·ªÅn
        totalPrice -= discount;
        couponDetails = { coupon_id: coupon._id, discountValue: discount };
        coupon.used_by.push(user_id);
        await coupon.save();
      }
    }

    // üì¶ **5. √Åp d·ª•ng ph√≠ giao h√†ng**
    const shippingFee = 50; // Ph√≠ giao h√†ng c·ªë ƒë·ªãnh
    totalPrice = Math.max(totalPrice + shippingFee, 0);

    // üìë **6. T·∫°o ƒë∆°n h√†ng m·ªõi**
    const newOrder = new Order({
      user_id,
      recipientName,
      phoneNumber,
      address,
      items,
      totalPrice,
      shippingFee,
      discount,
      paymentMethod,
      coupon: couponDetails || undefined,
      customerNote: customerNote || '',
      status: 'pending',
      paymentStatus: 'unpaid',
    });

    await newOrder.save();
    await Cart.findByIdAndDelete(cartId);

    req.flash('success', 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng!');
    res.redirect(`/order/detail/${newOrder._id}`);
  } catch (error) {
    console.error('Error during checkoutPost:', error);
    req.flash('error', 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ƒë·∫∑t h√†ng.');
    res.redirect('back');
  }
};



module.exports.ordered = async (req, res) => {
  try {

    const userId = res.locals.user._id;

    // L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng
    const orders = await Order.find({
      user_id: userId,
      deleted: false, 
      status: { $nin: ["completed", "canceled"] }
    })
      .populate("items.product_id", "title thumbnail price") 
      .populate("coupon.coupon_id", "code discount_value") 
      .lean(); 

    if (orders.length === 0) {
      return res.render("clients/pages/cart/ordered", {
        title: "Th√¥ng tin ƒë∆°n h√†ng",
        orders: [],
        message: "B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.",
      });
    }

    // Render danh s√°ch ƒë∆°n h√†ng
    res.render("clients/pages/cart/ordered", {
      title: "Th√¥ng tin ƒë∆°n h√†ng",
      orders,
    });
  } catch (error) {
    console.error("Error fetching orders:", error);
    req.flash("error", "ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin ƒë∆°n h√†ng.");
    res.redirect("/cart");
  }
};

module.exports.deleteCartItem = async (req, res) => {
  const cartId = req.cookies.cartId;
  const productId = req.body["data-delete-item-cart"]; 

  try {
    // T√¨m gi·ªè h√†ng theo ID
    const cart = await Cart.findById(cartId);

    if (!cart) {
      return res.redirect("back");
    }

    // L·ªçc ra s·∫£n ph·∫©m kh√¥ng mu·ªën x√≥a
    cart.products = cart.products.filter(
      (item) => item.product_id.toString() !== productId
    );

    await cart.save();

    return res.redirect("back");
  } catch (error) {
    console.error(error);
    return res.redirect("back");
  }
};
